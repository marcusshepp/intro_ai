1.) analysis - enumerate all possible moves
2.) strategy
3.) move

• depth && branching factor tell you how complex your decision tree is

MiniMax:
x = maximizer
o = minimizer

o will always chose the minimum path, x will always pick the maximum.

http://neverstopbuilding.com/minimax :

• If the game is over, return the score from X's perspective.
• Otherwise get a list of new game states for every possible move
• Create a scores list
• For each of these states add the minimax result of that state to the scores list
• If it's X's turn, return the maximum score from the scores list
• If it's O's turn, return the minimum score from the scores list

It's X's turn in state 1. X generates the states 2, 3, and 4 and calls minimax on those states.
State 2 pushes the score of +10 to state 1's score list, because the game is in an end state.
State 3 and 4 are not in end states, so 3 generates states 5 and 6 and calls minimax on them, while state 4 generates states 7 and 8 and calls minimax on them.
State 5 pushes a score of -10 onto state 3's score list, while the same happens for state 7 which pushes a score of -10 onto state 4's score list.
State 6 and 8 generate the only available moves, which are end states, and so both of them add the score of +10 to the move lists of states 3 and 4.
Because it is O's turn in both state 3 and 4, O will seek to find the minimum score, and given the choice between -10 and +10, both states 3 and 4 will yield -10.
Finally the score list for states 2, 3, and 4 are populated with +10, -10 and -10 respectively, and state 1 seeking to maximize the score will chose the winning move with score +10, state 2.

DEEP BLUE:
- alpha beta pruning
- minimax
- uneven tree development
- progressive deepening
- parallel computing
- opening moves
- finishing moves
